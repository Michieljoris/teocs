file: class 
class: 'class' className '{' classVarDec*  subroutineDec* '}' 
classVarDec: ('static' | 'field' ) type varName (',' varName)*  ';' 
type:  'int' | 'char' | 'boolean' | className 
subroutineDec: ('constructor' | 'function' | 'method')  ('void' | type) subroutineName '(' parameterList? ')' subroutineBody
parameterList:  type varName  (',' type varName)*
subroutineBody: '{' varDec* statement* '}' 
varDec:  'var' type varName (',' varName)* ';' 
className: identifier 
subroutineName: identifier 
varName: identifier 
statement: letStatement | ifStatement | whileStatement | doStatement | returnStatement  
letStatement: 'let'  varName ('[' term (op term)* ']')? '=' term (op term)* ';' 
ifStatement: 'if' '(' term (op term)* ')' '{' statement* '}'  ( 'else' '{' statement* '}' )?
whileStatement: 'while' '(' term (op term)* ')' '{' statement* '}' 
doStatement:  'do'  subroutineCall ';' 
returnStatement  'return'  (';' | (term (op term)* ';')) 
expression: term (op term)* 
term: integerConstant | stringConstant | keywordConstant | (varName '[' term (op term)* ']') | subroutineCall  | ('(' term (op term)* ')') | (unaryOp merm) | varName
subroutineCall: (subroutineName '(' expressionList? ')') |( ( className | varName) '.' subroutineName '(' expressionList? ')') 
expressionList: expression (',' expression)* 
op: '+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '=' 
unaryOp: '-' | '~'  
keywordConstant: 'true' | 'false' | 'null' | 'this' 
